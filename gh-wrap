#!/usr/bin/env bash
set -e

while [ $# -gt 0 ]; do
  case "$1" in
  -h|--help)
    cat << EOS
Collect your yearly GitHub all stats
 - Commits : yearly commits count in all private/public repositories
 - PullRequests : yearly opened pull requests count in all private/public repositories
 - Issues : yearly opened issues count in all private/public repositories
 - NewRepos : yearly created repositories count without fork

USAGE
  gh wrap [<year>] [flags]

FLAGS

INHERITED FLAGS
  -h, --help                     Show help for command

ACKNOWLEDGMENTS
  This gh extension is inspired by https://lowcode.land/ghwrap/
EOS
    exit 0
    ;;
  * )
    if [ -z $YYYY ]; then
      YYYY=$1
    fi
    ;;
  esac
  shift
done

if [ -z $YYYY ]; then
  YYYY=$(date '+%Y')
fi

LOGIN=$(gh api user --jq .login)

QUERY="author:${LOGIN} author-date:${YYYY}-01-01..${YYYY}-12-31"
COMMITS_CNT=$(gh api -X GET search/commits -f q="${QUERY}" -f per_page=1 --jq .total_count)

QUERY=`cat << EOS
  query {
    search(query: "type:pr author:${LOGIN} created:${YYYY}-01-01..${YYYY}-12-31", type: ISSUE) {
      issueCount
    }
  }
EOS
`
PULL_REQUESTS_CNT=$(gh api graphql -f query="${QUERY}" --jq .data.search.issueCount)

QUERY=`cat << EOS
  query {
    search(query: "type:issue author:${LOGIN} created:${YYYY}-01-01..${YYYY}-12-31", type: ISSUE) {
      issueCount
    }
  }
EOS
`
ISSUES_CNT=$(gh api graphql -f query="${QUERY}" --jq .data.search.issueCount)

QUERY=`cat << EOS
  query {
    search(query: "user:${LOGIN} fork:false created:${YYYY}-01-01..${YYYY}-12-31", type: REPOSITORY) {
      repositoryCount
    }
  }
EOS
`
NEW_REPOS_CNT=$(gh api graphql -f query="${QUERY}" --jq .data.search.repositoryCount)

cat - << EOS
{
  "GitHub CLI Wrap ðŸš€": "${LOGIN}'s ${YYYY} GitHub ALL Stats",
  "Commits": ${COMMITS_CNT},
  "PullRequests": ${PULL_REQUESTS_CNT},
  "Issues": ${ISSUES_CNT},
  "NewRepos": ${NEW_REPOS_CNT}
}
EOS